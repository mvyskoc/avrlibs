# 
# Copyright 2015 Martin Vyskocil <m.vyskoc@seznam.cz>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import sys

# out_file = sys.stdout
out_file = open("avrio_pins.h", "w")

ports = "A B C D E F G H I J K L".split()

out_file.write("""/*
 * Copyright 2015 Martin Vyskocil <m.vyskoc@seznam.cz>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /* This code was generated by avrio_pins_h.py tool. Please don't 
    update this file manually.
  */   
""")

out_file.write("""#ifndef AVRIO_PINS_H_INCLUDED
#define AVRIO_PINS_H_INCLUDED

#include <avr/../inttypes.h>


""")

for i,p in enumerate(ports):
    out_file.write("#define ioPORT%s %d\n" % (p, i) )
out_file.write("\n")


for i, p in enumerate(ports):
    out_file.write("\n")
    out_file.write("#ifdef PORT%s\n" % (p,) )

    out_file.write("    #ifndef PORT_LOW_INDEX\n")
    out_file.write("        #define PORT_LOW_INDEX ioPORT%s\n" % (p,) )
    out_file.write("    #endif // IO_LOW_PORT\n")

    out_file.write("    #undef PORT_HIGH_INDEX\n")
    out_file.write("    #define PORT_HIGH_INDEX %d\n" % (i,) )
    out_file.write("    #define IOREG_TABLE_PIN%s ,(ioreg_t) ((volatile uint16_t) &PIN%s)\n" % (p,p) )

    if i >= ports.index("H"):
        out_file.write("    #ifndef IO_REG16\n")
        out_file.write("        #define IO_REG16\n")
        out_file.write("    #endif\n")

    out_file.write("\n")
    for bit in xrange(8):
        out_file.write("    #define ioPIN%s%d %d\n" % (p, bit, (i<<3)|bit ) )
        
    out_file.write("\n")        
    for bit in xrange(8):
        out_file.write("    #define ioP%s%d ioPIN%s%d\n" % (p, bit, p, bit) )

    out_file.write("\n")
    for bit in xrange(8):
        out_file.write("    #define PIN_AT_P%d PIN%s\n" % ((i<<3)|bit, p) )

    out_file.write("\n")
    for bit in xrange(8):
        out_file.write("    #define DDR_AT_P%d DDR%s\n" % ((i<<3)|bit, p) )

    out_file.write("\n")
    for bit in xrange(8):
        out_file.write("    #define PORT_AT_P%d PORT%s\n" % ((i<<3)|bit, p) )

    out_file.write("\n")
    for bit in xrange(8):
        out_file.write("    #define IOPORT_AT_P%d ioPORT%s\n" % ((i<<3)|bit, p) )

    out_file.write("\n")
    out_file.write("    #define IIF_PORT%s(true, false) true\n" % (p,) )
    out_file.write("#else\n")
    out_file.write("    #define IOREG_TABLE_PIN%s NOT_A_PORT\n" % (p,) )
    out_file.write("    #define IIF_PORT%s(true, false) false\n" % (p,) )
                   
    out_file.write("#endif // PORT%s\n" % (p,) )

out_file.write("\n")
for i, p in enumerate(ports):
    out_file.write("#if PORT_HIGH_INDEX == ioPORT%s\n" % (p,) )
    for i2 in range(i+1, len(ports)):
        out_file.write("    #undef IOREG_TABLE_PIN%s\n" % (ports[i2],) )
        out_file.write("    #define IOREG_TABLE_PIN%s\n" % (ports[i2],) )
        if i2 < len(ports)-1:
            out_file.write("\n")
    out_file.write("#endif //PORT_HIGH_INDEX == ioPORT%s\n" % (p,) )
    out_file.write("\n")
        
        
out_file.write("\n")
out_file.write("#define PORT_TO_INPUT_TABLE()  \\\n")
for i, p in enumerate(ports):
    out_file.write("  	IOREG_TABLE_PIN%s" % (p,))
    if i < len(ports)-1:
        out_file.write("  \\\n")
    else:
        out_file.write("\n")

out_file.write("\n")
out_file.write("//Helper function definiton to IIF_PORT_EQ. Compare values of two ioPORTS")
for i, p in enumerate(ports):
    out_file.write("\n")
    for i2, p2 in enumerate(ports):
        if i == i2:
            out_file.write("#define _IIF_PORT_EQ_%d_%d(true, false) true\n" % (i, i2) )
        else:
            out_file.write("#define _IIF_PORT_EQ_%d_%d(true, false) false\n" % (i, i2) )




out_file.write("""#endif // AVRIO_PINS_H_INCLUDED
""")

out_file.close()
print "End of script"
